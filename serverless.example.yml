# This is a rough example of using Okta as the authorization server as part of a SMART/FHIR deployment.
# It includes the following features:
# - standalone launch with launch parameters
# - a patient picker screen and OAuth2 scope selection and consent.
# - applicable proxies for properly handling public client authentication as well as returning launch parameters in a flexible way.
# - passthrough API endpoints for demo data, hosted by HAPI.org.

service: auth0-smartfhir-auth-demo

provider:
  name: aws
  runtime: nodejs12.x
  stage: stg
  region: us-east-1

  logs:
    restApi: true

  environment:
#This variable will contain the live API URL (https://XXXXX.execute-api.us-east-1.amazonaws.com/stg)
    GATEWAY_URL:
      !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - ${opt:region, self:provider.region}
          - '.amazonaws.com/'
          - ${opt:stage, self:provider.stage}

    AUTH0_ORG: YOURAUTH0ORGHERE.auth0.com

#OAuth2 clientid/secret used to call Auth0 API.
    AUTH0_API_CLIENTID: CLIENT_ID_FROM_AUTH0_M2M_APP_HERE
    AUTH0_API_CLIENTSECRET: CLIENT_SECRET_FROM_AUTH0_M2M_APP_HERE

#ID/key used for signing the tokens to/from Auth0 in communicating via redirect.
    PICKER_DISPLAY_NAME: Stage Patient Picker
    PICKER_CLIENT_ID: PutAReallyLongValueHereProbablyanActualCERTHere
    PICKER_CLIENT_SECRET: PutAReallyLongValueHereProbablyanActualCERTHere

#ID of the FHIR API in Auth0
    FHIR_RESOURCE_SERVER_ID: FHIR_API_ID_IN_AUTH0_HERE

#Shared client secret for public apps that are not PKCE enabled.
    PUBLIC_CLIENT_SECRET: SHARED_SECRET_HERE_THAT_IS_CLIENTSECRET_FOR_PUBLIC_APPS

#Lambda functions
functions:

##METADATA ENDPOINTS
  smart-config-endpoint:
    handler: ${self:provider.name}/metadata_endpoints.smartConfigHandler
    events:
      - http:
          path: /smart-configuration
          method: GET
          cors: true
      - http:
          path: /.well-known/smart-configuration
          method: GET
          cors: true

  metadata-endpoint:
    handler: ${self:provider.name}/metadata_endpoints.metadataHandler
    events:
      - http:
          path: /metadata
          method: GET
          cors: true

  keys_endpoint:
    handler: ${self:provider.name}/keys.keysHandler
    events:
      - http:
          path: /keys
          method: GET
          cors: true

##TOKEN ENDPOINT
  smart-token-proxy:
    handler: ${self:provider.name}/token.tokenHandler
    events:
      - http:
          path: /token
          method: POST
          cors: true

##PATIENT PICKER UI
  patient_picker_get:
    handler: ${self:provider.name}/patient_picker.patientPickerGetHandler
    events:
      - http:
          path: /patient_authorization
          method: GET

  patient_picker_post:
    handler: ${self:provider.name}/patient_picker.patientPickerPostHandler
    events:
      - http:
          path: /patient_authorization
          method: POST

 ##MOCK PATIENT API
  mock_patient_service:
    handler: ${self:provider.name}/mock_patient_service.mockPatientServiceHandler
    events:
      - http:
          path: /patientMockService
          method: GET

#############
#HAPI Proxies
#############
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          integration: http-proxy
          request:
            uri: http://hapi.fhir.org/baseR4/{proxy}
            parameters:
              paths:
                proxy: true
#################
#END HAPI Proxies
#################
